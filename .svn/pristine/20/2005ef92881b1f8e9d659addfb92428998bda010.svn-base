package objectAdventure.item;
// $Date$

import java.util.List;
import java.util.logging.Logger;

/**
 * The Item interface is the base interface for all items in the game.
 *
 * @author Adam J. Conover, COSC436/COSC716
 */
public interface Item {

    /*
     * The full description of the item.
     *
     * @return A full item description
     */
    String getItemFullDescription();

    @Deprecated
    default String getItemDescription() {
        return "This method has been deprecated. Please use getItemFullDescription() instead.";
    }

    /**
     * The short description of the item for display in lists, etc.
     *
     * @return A short item description.
     */
    String getItemDisplayName();

    /**
     * Can the item be picked up and relocated.
     *
     * @return return true if the item can be moved.
     */
    default boolean isTransferable() {
        return false;
    }

    /**
     * Short Names lists for use in picking up and removing items.
     *
     * @return A list containing the aliases (short names) for an item.
     */
    default List<String> getItemAliases() {
        return List.of();
    }

    static List<String> getUpperCaseAliases(Item item) {
        return item.getItemAliases().stream().map(String::toUpperCase).toList();
    }

    /**
     * Notify the game core the item has been interacted with.
     *
     * @param ie The item interaction that occurred.
     * @return The result of the interaction as an InteractionResult.
     */
    default InteractionResult itemInteractionHandler(ItemInteractionEvent ie) {
        Logger.getGlobal().fine("DEBUG: " + ie);
        return InteractionResult.success("I don't know how to do that.");
    }

}
