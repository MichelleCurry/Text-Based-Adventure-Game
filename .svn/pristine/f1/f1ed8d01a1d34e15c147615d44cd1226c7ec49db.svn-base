package objectAdventure.item.itemImpl;

import objectAdventure.common.Observable;
import objectAdventure.common.Observer;
import objectAdventure.item.*;
import java.util.List;

import java.util.*;

/**
 * A sample item for demonstration purposes.
 *
 * @author Adam J. Conover, COSC436/COSC716
 */
public class lantern_mlc implements Item, Observable<String> {

    private String description;
    private final String displayName;

    List<Observer<String>> observers = new LinkedList<>();
    /**
     * Constructor
     */
    public lantern_mlc() {
        this.displayName = "lantern";
        this.description = "The lantern is quite dusty but still has fuel.";
    }

    /**
     * THIS IS JUST A SAMPLE.
     *
     * @return The item description.
     */
    @Override
    public String getItemFullDescription() {
        return this.description;
    }

    @Override
    public String getItemDisplayName() {
        return this.displayName;
    }

    /**
     * Item Can be picked up and moved.
     *
     * @return True
     */
    @Override
    public boolean isTransferable() {
        boolean isAnchored = false;
        return !isAnchored;
    }

    @Override
    public List<String> getItemAliases() {
        return List.of("lantern", "light");
    }

    @Override
    public void addObserver(Observer<String> theObserver) {
        this.observers.add(theObserver);
    }

    @Override
    public void removeObserver(Observer<String> theObserver) {
       this.observers.remove(theObserver);
    }

    @Override
    public void notifyObservers(String notificationObject) {
        for(var observer: this.observers){
            observer.update(notificationObject);
        }
    }

    /**
     * Item Interaction Example
     *
     * @see objectAdventure.item.ItemInteractionEvent
     **/
    @Override
    public InteractionResult itemInteractionHandler(ItemInteractionEvent ie) {
        return switch (ie) {
            case TAKE:
                this.description = "You take the lantern from the ceiling.";
                yield InteractionResult.success("You take the " + this.getItemDisplayName());
            case ACTIVATE:
                this.description = "You turn on the lantern, now you can see the room.";
                notifyObservers("THE LIGHTTTT");
                yield InteractionResult.success(this.getItemDisplayName());
            case DEACTIVATE:
                this.description = "You turn off the lantern making it difficult to see things";
                yield InteractionResult.success(this.getItemDisplayName());
            case INSPECT:
                this.description = "The lantern is rounded, inside is a wick and some fuel.";
                yield InteractionResult.success(this.getItemFullDescription());
            case DROP:
                this.description = "You throw the lantern, it smashes on the ground into a million pieces";
                yield InteractionResult.success(this.getItemFullDescription());
            default:
                // Interactions not handled by this item should be handled by the game core.
                yield InteractionResult.success("The lantern does not respond to that action.");
        };
    }
}
